name: Flask on EKS
on:
  push:
    branches: ['main']
    
jobs:
  Login-to-AWS-and-Build:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'github-actions[bot]' && github.event_name != 'push' || github.event.pusher.name != 'github-actions[bot]' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
          
    - name: Install kubectl
      uses: azure/setup-kubectl@v2.0
      with:
        version: 'v1.29.0' # default is latest stable
      id: install

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        #aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{secrets.REGION}}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{secrets.ECR_REPO_NAME}}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
    - name: login repo    
      uses: actions/checkout@v3
      with:
        repository: sayyed-123/Flask-on-eks
        ref: 'main'
        token: ${{ secrets.G_TOKEN }}
    - name: setup git config
      run: |
        git config user.email "mudassar.sayyed45@gmail.com"
        git config user.name "sayyed-123"
        sed 's/TAG/${{ github.sha }}/g' dep-demo.yaml > deployment.yaml
        git add .
        git commit -m "skip ci, Update image for - ${{ github.sha }}"
    - run: echo ${{ github }}
    - run: git push origin main
    
    - name: Update kube config
      run: aws eks update-kubeconfig --name my-cluster
    
    - name: Deploy to EKS
      run: |
        kubectl apply -f deployment.yaml
        kubectl apply -f service.yaml
    - name: Check last commit message
      id: commit-message
      run: echo "COMMIT_MESSAGE=$(git log -1 --pretty=format:'%s')" >> $GITHUB_ENV

    - name: Skip if commit is automated
      if: contains(env.COMMIT_MESSAGE, '[skip ci]')
      run: |
        echo "Automated commit detected - skipping job"
        exit 0


